# Problem Set 2, hangman.py
# MIT Introduction To Computer Science And Programming In Python
# Name: Luke M.
# Collaborators: N/A
# Time spent: 2:10pm 2/26 to 8:58pm 2/27

# Hangman Game
# -----------------------------------




import random #imports random
import string #imports string

#secret_word = "apple" #Test


WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.

    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist


def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)

    Returns a word from wordlist at random
    """
    return random.choice(wordlist)


# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"

    for char in secret_word: #sets for loop for characters in secret word
        if char not in letters_guessed: #if the word is not guessed
            return False

    return True












def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    secret_word_print = ''#sets our new variable equal to space
    for char in secret_word: #for the char in secret word
        if char in letters_guessed:#if the character is in our letters guessed
            secret_word_print += char #our secret word is now equal to the correct character
        else:
            secret_word_print += "_ "     #print '_ ' if the letter is not in secret_word
    return secret_word_print #the code is put through multiple if else statements so we end it with return












def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    available_letters = '' #our new variable is equal to string
    for char in string.ascii_lowercase: #for characters in lowercase, alphabetical string
        if char not in letters_guessed: #if the letter is not in letters guessed
            available_letters += char #our new string gets a guess added to it
    return available_letters #the string in returned in all lowercase letters





def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many
      letters the secret_word contains and how many guesses s/he starts with.

    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.

    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!

    * The user should receive feedback immediately after each guess
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the
      partially guessed word so far.

    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    #pass
    print("Welcome to the game Hangman!")
    print("I am thinking of a word that is {} letters long ".format(len(secret_word))) #displays length of secret word


    num_guesses = 6 #the user starts with 6 guesses every game
    warnings_left = 3 #warnings for the wrong input
    letters_guessed = [] #this space represents letters guessed

    print("You have {} warnings left".format(warnings_left)) #initializes warnings left
    print("--------------") #prints spaces

    while True: #Sets a boolean while
        print("You have {} guesses left".format(num_guesses)) #initilaizes guesses
        print("Available letters: {}".format(get_available_letters(letters_guessed))) #initilaizes available letters

        letter_guessed = input("Please guess a letter: ").lower()#makes our guess a lowercase letter
        guessed_word = get_guessed_word(secret_word, letter_guessed) # Get guessed word initializes secret word and letters guessed

        if letter_guessed.isalpha():  # checks all letters in our string from those in the alphabet
            if letter_guessed not in letters_guessed:   # if the letter guessed is not in our letters guessed
                letters_guessed.append(letter_guessed)   # append letters_guessed with the letter we guessed
                guessed_word = get_guessed_word(secret_word, letters_guessed)

                if letter_guessed in secret_word: #If the letter is in our word
                    print("You guessed a correct letter {}".format(guessed_word)) #insert guessed letter into our string
                else:
                    if letter_guessed in "aeiou":
                        num_guesses -= 2
                    else:
                        num_guesses -= 1 #subtracts from your total amount of guesses
                    print("Whoops! that letter is not in word {}".format(guessed_word))

            else:
                if warnings_left > 0: #If we have warnings left
                    warnings_left -= 1 #We subtract warnings left from our current number of warnings
                    print("ERROR, that is not a valid guess you have {} warnings left: {}".format(warnings_left, guessed_word)) #initializes warnings left count
                else:
                    num_guesses -= 1 #subtracts 1 from our guesses if we run out of warnings
                    print("ERROR,that is not a valid guess you have no warnings left so you loose one guess: {}".format(guessed_word)) #initializes no warnings left

        elif letter_guessed == '*':
            print('possible word matches are: ')
            show_possible_matches(guessed_word)
        else:
            if warnings_left > 0:
                warnings_left -= 1
                print("ERROR, that is not a valid letter. you have {} warnings left: {}".format(warnings_left, guessed_word))

            else:
                num_guesses -= 1
                print('Oops! You\'ve already guessed that letter. You now have no warnings left so you lose one guess: {}'.format(
                        guessed_word))

        print('--------')

        if is_word_guessed(secret_word, letters_guessed): #if the word guessed is in secret word and letters guessed
            unique_letters_in_secret_word = [] #creates new variable
            for char in secret_word: #for loop using secret word
                if char not in unique_letters_in_secret_word: #if the character is not in unique_letters_secret_word
                    unique_letters_in_secret_word.append(char)
            print("Congratulations! you guessed the word!")
            print(
                'Your total score for this game is {}'.format(num_guesses * len(unique_letters_in_secret_word)))
            break


        if num_guesses <= 0: #accounts for negative
            print("Sorry you ran out of guesses, the word was: {}".format(secret_word))
            break



















# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
# (hint: you might want to pick your own
# secret_word while you're doing your own testing)


#secret_word = "apple" #Test 
#letters_guessed = ['e','i','k','p','r','s'] #Test 
#-----------------------------------------------

# -----------------------------------


def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise:
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


def show_possible_matches(my_word):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.

    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many
      letters the secret_word contains and how many guesses s/he starts with.

    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.

    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter

    * The user should receive feedback immediately after each guess
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the
      partially guessed word so far.

    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word.

    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


# When you've completed your hangman_with_hint function, comment the two similar
# lines above that were used to run the hangman function, and then uncomment
# these two lines and run this file to test!
# Hint: You might want to pick your own secret_word while you're testing.


if __name__ == "__main__":
    # pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.

    secret_word = choose_word(wordlist)
    hangman(secret_word)

###############

# To test part 3 re-comment out the above lines and
# uncomment the following two lines.

# secret_word = choose_word(wordlist)
# hangman_with_hints(secret_word)
